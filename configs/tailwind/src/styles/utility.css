/* Utility Styles */

/* - Tailwind CSS Docs: https://tailwindcss.com/docs/adding-custom-styles#adding-custom-utilities */

/* Grid Utilities */

@utility auto-fill-* {
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(--value([*]), 100%), 1fr)
  );
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(--value(--spacing-*, --text-*), 100%), 1fr)
  );
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(var(--spacing) * --value(integer), 100%), 1fr)
  );
}

@utility auto-fit-* {
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(--value([*]), 100%), 1fr)
  );
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(--value(--spacing-*, --text-*), 100%), 1fr)
  );
  grid-template-columns: repeat(
    auto-fit,
    minmax(min(var(--spacing) * --value(integer), 100%), 1fr)
  );
}

/* Dev Utility */

@utility dev-* {
  --alpha: calc(--modifier(integer) * 1%);
  --spacing: calc(--modifier(number, integer) * var(--spacing-*, --spacing));
  padding-block: --value(--spacing-*, [*]);
  padding-block: --spacing(--value(number, integer));
  padding-inline: calc(--value(--spacing-*, [*]) * 2);
  padding-inline: calc(--spacing(--value(number, integer)) * 2);
  background-color: --alpha(--value(--color-*, [color]) / var(--alpha, 100%));
  color: --value(--color-*-foreground);

  &:where([class*='flex']) {
    gap: calc(--value(--spacing-*, [*]) / 2);
    gap: calc(--spacing(--value(number, integer)) / 2);
  }

  &:where([class*='outline']) {
    --outline-width: calc(--modifier(number, integer) * var(--outline-width-1, --border-width-2, 2px));
    outline-width: --value(--outline-width-*, --border-width-*, [*]);
    outline-width: --outline-width(--value(number, integer));
    outline-offset: calc(--value(--outline-width-*, --border-width-*, [*]) * 2);
    outline-offset: calc(--outline-width(--value(number, integer)) * 2);
    outline-color: --alpha(--value(--color-*, [color]) / 75%);
  }

  &:where([class*='border']) {
    --border-width: calc(--modifier(number, integer) * var(--border-width-1, 1.5px));
    border-width: --value(--border-width-*, [*]);
    border-width: --border-width(--value(number, integer));
    border-color: --alpha(--value(--color-*, [color]) / 50%);
  }

  &:where([class*='rounded']) {
    border-radius: --value(--radius-*, [*]);
  }
}

/* Box Utilities */

@utility box {
  box-sizing: border-box;
  display: flex;
}

/* TODO: use `--modifier` to handle more box placement styles */
@utility box-* {
  &:where(:not([class*='box'])) {
    box-sizing: border-box;
    display: flex;
  }
  align-items: --value('center', 'start', 'end', 'stretch');
  justify-content: --value('center', 'start', 'end', 'stretch');
}

/* TODO: look into using ratio modifier to handle different border color styles */
@utility box-color-* {
  --alpha: calc(--modifier(integer, number) * 1%);
  border-color: --modifier(--color-*, [color]);
  background-color: --alpha(--value(--color-*, [color]) / var(--alpha, 100%));
  color: --value(--color-*-foreground);
}

/* Action Utilities */

@utility action {
  transition-property: background-color, border-color, box-shadow, color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to;
  transition-timing-function: var(--default-transition-timing-function);
  transition-duration: var(--default-transition-duration);

  & img,
  & svg {
    width: 1em;
    height: 1em;
  }

  & svg {
    pointer-events: none;
    flex-shrink: 0;
  }
}

@utility action-* {
  --alpha: calc(--modifier(integer) * 1%);
  outline-color: --alpha(--value(--color-*, [color]) / 75%);
  border-color: --alpha(--value(--color-*, [color]) / 50%);
  background-color: --alpha(--value(--color-*, [color]) / var(--alpha, 100%));
  color: --value(--color-*-foreground);

  &:hover {
    border-color: transparent;
    background-color: --alpha(--value(--color-*, [color]) / 90%);
  }

  &:active {
    border-color: --alpha(--value(--color-*, [color]) / 100%);
    background-color: --alpha(--value(--color-*, [color]) / var(--alpha, 100%));
  }
}

@utility action-outline-* {
  --alpha: calc(--modifier(integer) * 1%);
  --outline-width: calc(--modifier(number) * var(--outline-width-2, --border-width-2, 2px));
  outline-offset: calc(var(--outline-width-2, --border-width-2, 2px) * 2);
  outline-offset: calc(--value(--outline-width-*, --border-width-*, [*]) * 2);
  outline-offset: calc(--outline-width(--value(number, integer)) * 2);
  outline-color: var(--color-ring, inherit);
  outline-color: --alpha(--value(--color-*, [*]) / var(--alpha, 100%));

  &:focus-visible {
    outline-width: var(--outline-width-2, --border-width-2, 2px);
    outline-width: --value(--outline-width-*, --spacing-*, [*]);
    outline-width: --outline-width(--value(number, integer));
  }

  &[aria-invalid="true"] {
    &:focus-visible {
      outline-width: 0;
    }
  }
}

/* Spacing Utilities */

@utility framer-* {
  --spacing: calc(--modifier(number, integer) * var(--spacing-*, [*]));
  padding: calc(--value(*) * var(--spacing-fs, --spacing));
  padding: --value(--spacing-*, [*]);
  padding: --spacing(--value(number, integer));
  &:where([class~='box']) {
    gap: calc(--value(*) * var(--spacing-fs, --spacing));
    gap: --value(--spacing-*, [*]);
    gap: --spacing(--value(number, integer));
  }
}

@utility wrapper-* {
  --spacing: calc(--modifier(number, integer) * var(--spacing-*, [*]));
  padding-block: calc(--value(*) * var(--spacing-fs, --spacing));
  padding-block: --value(--spacing-*, [*]);
  padding-block: --spacing(--value(number, integer));
  &:where([class~='box']) {
    gap: calc(--value(*) * var(--spacing-fs, --spacing));
    gap: --value(--spacing-*, [*]);
    gap: --spacing(--value(number, integer));
  }
}

/* Container Utilities */

@utility container {
  margin-inline: auto;
  max-width: var(--breakpoint-7xl);
}

@utility container-* {
  --spacing: calc(--modifier(number, integer) * var(--spacing-*, [*]));
  padding-inline: calc(--value(*) * var(--spacing-fs, --spacing));
  padding-inline: --value(--spacing-*, [*]);
  padding-inline: --spacing(--value(number, integer));
  &:where([class~='box']) {
    gap: calc(--value(*) * var(--spacing-fs, --spacing));
    gap: --value(--spacing-*, [*]);
    gap: --spacing(--value(number, integer));
  }
}

/* Display Utilities */

@utility display-text {
  display: inline-flex;
  flex-wrap: wrap;
  align-items: center;
  text-wrap: pretty;
  gap: var(--spacing-fs-lg-sm, calc(var(--spacing) * 12));
}

/* Media Utilities */

@utility fluid-media {
  &:is(img, svg):not([class*='size-']) {
    width: 1em;
    height: 1em;
  }
}
